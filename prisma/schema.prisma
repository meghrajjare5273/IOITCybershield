generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Student {
  id                String             @id @default(cuid())
  name              String
  branch            String
  phone             String
  rollno            String
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  courseEnrollments CourseEnrollment[]
  courseAttendances CourseAttendance[]
}

model Course {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  sessions    CourseSession[]
  enrollments CourseEnrollment[]
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([courseId,studentId])
}

model CourseSession {
  id          String           @id @default(cuid())
  courseId    String
  date        DateTime
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attendances CourseAttendance[]

  @@index([courseId])
}

model CourseAttendance {
  id              String        @id @default(cuid())
  studentId       String
  courseSessionId String
  present         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  student         Student       @relation(fields: [studentId], references: [id])
  courseSession   CourseSession @relation(fields: [courseSessionId], references: [id])

  @@unique([studentId, courseSessionId])
  @@index([studentId, courseSessionId])
}